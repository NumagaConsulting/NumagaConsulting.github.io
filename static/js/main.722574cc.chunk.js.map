{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","index","name","artist","album","releaseDate","slice","renderAction","TrackList","tracks","map","element","id","SearchResults","totalSearchResults","renderResults","searchResults","Playlist","handleNameChange","onNameChange","test","split","defaultValue","playlistTracks","onSave","renderSuccessfulMessage","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expireInMatch","expiresIn","parseFloat","setTimeout","history","pushState","fetch","headers","Authorization","then","response","json","networkError","alert","message","jsonResponse","items","artists","release_date","uri","savePlaylist","playlistName","length","userID","userName","display_name","method","body","JSON","stringify","respons","playlistID","uris","App","updatePlaylistName","newPlaylistTracks","find","savedTrack","push","filter","trackURIs","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAAIA,E,kFCoCWC,G,wDA/Bb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,KAAM,IAErB,EAAKC,OAAS,EAAKA,OAAOC,KAAZ,gBACd,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBALP,E,qDASjBE,KAAKN,MAAMO,SAASD,KAAKL,MAAMC,Q,uCAGhBM,GACfF,KAAKG,SAAS,CAAEP,KAAMM,EAAME,OAAOC,U,+BAInC,OACE,sBAAKC,UAAU,YAAf,UACE,uBACEC,YAAY,iCACZC,SAAUR,KAAKD,mBAEjB,wBAAQO,UAAU,eAAeG,QAAST,KAAKH,OAA/C,2B,GAxBgBa,IAAMC,YCmDfC,G,wDAlDb,WAAYlB,GAAQ,IAAD,8BACjB,cAAMA,IAEDmB,SAAW,EAAKA,SAASf,KAAd,gBAChB,EAAKgB,YAAc,EAAKA,YAAYhB,KAAjB,gBAJF,E,2DAQjB,OAAIE,KAAKN,MAAMqB,UAEX,wBAAQT,UAAU,eAAeG,QAAST,KAAKc,YAA/C,eAMF,wBAAQR,UAAU,eAAeG,QAAST,KAAKa,SAA/C,iB,iCAOFb,KAAKN,MAAMsB,MAAMhB,KAAKN,MAAMuB,S,oCAI5BjB,KAAKN,MAAMwB,SAASlB,KAAKN,MAAMuB,S,+BAI/B,OACE,sBAAKX,UAAU,QAAf,UACE,sBAAKA,UAAU,oBAAf,UACE,+BACGN,KAAKN,MAAMyB,MADd,KACuBnB,KAAKN,MAAMuB,MAAMG,QAExC,8BACGpB,KAAKN,MAAMuB,MAAMI,OADpB,MAC+BrB,KAAKN,MAAMuB,MAAMK,MAC7C,MACAtB,KAAKN,MAAMuB,MAAMM,aAChBvB,KAAKN,MAAMuB,MAAMM,YAAYC,MAAM,EAAG,SAG3CxB,KAAKyB,sB,GA7CMf,IAAMC,YCsBXe,G,6KArBH,IAAD,OACP,OACE,qBAAKpB,UAAU,YAAf,SAEGN,KAAKN,MAAMiC,OAAOC,KAAI,SAACC,EAASV,GAC/B,OACE,cAAC,EAAD,CACEF,MAAOY,EACPV,MAAOA,EAAQ,EAEfH,MAAO,EAAKtB,MAAMsB,MAClBE,SAAU,EAAKxB,MAAMwB,SACrBH,UAAW,EAAKrB,MAAMqB,WAHjBc,EAAQC,a,GAVHpB,IAAMC,YCuBfoB,G,oLArBX,OAAI/B,KAAKN,MAAMsC,mBACN,2CAAchC,KAAKN,MAAMsC,mBAAzB,cAEF,2C,+BAIP,OACE,sBAAK1B,UAAU,gBAAf,UACGN,KAAKiC,gBAEN,cAAC,EAAD,CACEN,OAAQ3B,KAAKN,MAAMwC,cACnBlB,MAAOhB,KAAKN,MAAMsB,MAClBD,WAAW,W,GAhBOL,IAAMC,YC6CnBwB,G,wDA5Cb,WAAYzC,GAAQ,IAAD,8BACjB,cAAMA,IAED0C,iBAAmB,EAAKA,iBAAiBtC,KAAtB,gBAHP,E,6DAMFI,GACfF,KAAKN,MAAM2C,aAAanC,EAAME,OAAOC,S,gDAIrC,GAAIL,KAAKN,MAAM4C,KACb,OACE,gCACE,uBACA,uBACA,qCACOtC,KAAKN,MAAM4C,KAAK,GAAGC,MAAM,KAAK,GADrC,MAC4CvC,KAAKN,MAAM4C,KAAK,GAD5D,mB,+BAUN,OACE,sBAAKhC,UAAU,WAAf,UACE,uBAAOkC,aAAc,eAAgBhC,SAAUR,KAAKoC,mBAEpD,cAAC,EAAD,CACET,OAAQ3B,KAAKN,MAAM+C,eACnBvB,SAAUlB,KAAKN,MAAMwB,SACrBH,WAAW,IAEb,wBAAQT,UAAU,gBAAgBG,QAAST,KAAKN,MAAMgD,OAAtD,6BAGC1C,KAAK2C,iC,GAvCSjC,IAAMC,YLAvBiC,EAAU,CACdC,eADc,WAEZ,GAAIrD,EACF,OAAOA,EAGT,IAAMsD,EAAmBC,OAAOC,SAASC,KAAKC,MAAM,wBAC9CC,EAAgBJ,OAAOC,SAASC,KAAKC,MAAM,sBACjD,GAAIJ,GAAoBK,EAAe,CACrC3D,EAAcsD,EAAiB,GAC/B,IAAMM,EAAYC,WAAWF,EAAc,IAG3C,OAFAJ,OAAOO,YAAW,kBAAO9D,EAAc,KAAiB,IAAZ4D,GAC5CL,OAAOQ,QAAQC,UAAU,eAAgB,KAAM,KACxChE,EAEPuD,OAAOC,SAAP,2DAlBW,mCAkBX,0EAjBc,qDAqBlBnD,OAnBc,SAmBPD,GAEL,OADAJ,EAAcoD,EAAQC,iBACfY,MAAM,2DAAD,OACiD7D,GAC3D,CACE8D,QAAS,CAAEC,cAAc,UAAD,OAAYnE,MAGrCoE,MACC,SAACC,GACC,OAAOA,EAASC,UAElB,SAACC,GACCC,MAAMD,EAAaE,YAGtBL,MAAK,SAACM,GAIL,OAAOA,EAAavC,OAAOwC,MAAMvC,KAAI,SAACC,GAAD,MAAc,CACjDC,GAAID,EAAQC,GACZV,KAAMS,EAAQT,KACdC,OAAQQ,EAAQuC,QAAQ,GAAGhD,KAC3BE,MAAOO,EAAQP,MAAMF,KACrBG,YAAaM,EAAQP,MAAM+C,aAC3BC,IAAKzC,EAAQyC,YAUrBC,aAvDc,SAuDDC,EAAc/B,GACzB,GAAK+B,GAAiB/B,EAAegC,OAArC,CAIAjF,EAAcoD,EAAQC,iBACtB,IAII6B,EAJEhB,EAAU,CACdC,cAAc,UAAD,OAAYnE,GACzB,eAAgB,oBAIlB,OAAOiE,MAAM,gCAAiC,CAAEC,QAASA,IACtDE,MACC,SAACC,GACC,OAAOA,EAASC,UAElB,SAACC,GACCC,MAAMD,EAAaE,YAGtBL,MAAK,SAACM,GACLQ,EAASR,EAAapC,GACtB,IAAM6C,EAAWT,EAAaU,aAG9B,OAAOnB,MAAM,oCAAD,OAAqCiB,EAArC,cAAyD,CACnEhB,QAASA,EACTmB,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAE5D,KAAMoD,MAE5BZ,MACC,SAACqB,GACC,OAAOA,EAAQnB,UAEjB,SAACC,GACCC,MAAM,oBAAD,OAAqBD,EAAaE,aAG1CL,MAAK,SAACM,GACL,IAAMgB,EAAahB,EAAapC,GAGhC,OAAO2B,MAAM,wCAAD,OAC8ByB,EAD9B,WAEV,CACExB,QAASA,EACTmB,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEG,KAAM1C,MAG9BmB,MACC,SAACqB,GACC,OAAOA,EAAQnB,UAEjB,SAACC,GACCC,MAAM,2BAAD,OAA4BD,EAAaE,aAGjDL,MAAK,SAACM,GACL,MAAO,CAACS,EAAUH,eAOnB5B,IM5BAwC,G,wDA1Fb,WAAY1F,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXuC,cAAe,GACfF,mBAAoB,GACpBwC,aAAc,GACd/B,eAAgB,GAChBH,KAAM,IAGR,EAAKzB,SAAW,EAAKA,SAASf,KAAd,gBAChB,EAAKgB,YAAc,EAAKA,YAAYhB,KAAjB,gBACnB,EAAKuF,mBAAqB,EAAKA,mBAAmBvF,KAAxB,gBAC1B,EAAKyE,aAAe,EAAKA,aAAazE,KAAlB,gBACpB,EAAKD,OAAS,EAAKA,OAAOC,KAAZ,gBAdG,E,qDAiBVmB,GACP,IAAMqE,EAAoBtF,KAAKL,MAAM8C,eACjC6C,EAAkBC,MAAK,SAACC,GAAD,OAAgBA,EAAW1D,KAAOb,EAAMa,QAInEwD,EAAkBG,KAAKxE,GACvBjB,KAAKG,SAAS,CAAEsC,eAAgB6C,O,kCAGtBrE,GACV,IAAMqE,EAAoBtF,KAAKL,MAAM8C,eAAeiD,QAClD,SAACF,GAAD,OAAgBA,EAAW1D,KAAOb,EAAMa,MAE1C9B,KAAKG,SAAS,CAAEsC,eAAgB6C,M,yCAIflE,GACjBpB,KAAKG,SAAS,CAAEqE,aAAcpD,M,qCAGhB,IAAD,OACPuE,EAAY3F,KAAKL,MAAM8C,eAAeb,KAAI,SAACC,GAAD,OAAaA,EAAQyC,OACrE1B,EAAQ2B,aAAavE,KAAKL,MAAM6E,aAAcmB,GAAW/B,MAAK,SAACC,GAAD,OAC5D,EAAK1D,SAAS,CACZqE,aAAc,eACd/B,eAAgB,GAChBH,KAAMuB,S,6BAKLjE,GAAO,IAAD,OACXgD,EAAQ/C,OAAOD,GAAMgE,MAAK,SAAC1B,GAAD,OACxB,EAAK/B,SAAS,CACZ+B,cAAeA,EACfF,mBAAoBE,EAAcuC,c,+BAMtC,OACE,gCACE,oCACI,sBAAMnE,UAAU,YAAhB,iBADJ,SAGA,sBAAKA,UAAU,MAAf,UACE,cAAC,EAAD,CAAWL,SAAUD,KAAKH,SAC1B,sBAAKS,UAAU,eAAf,UAEE,cAAC,EAAD,CACE4B,cAAelC,KAAKL,MAAMuC,cAC1BF,mBAAoBhC,KAAKL,MAAMqC,mBAC/BhB,MAAOhB,KAAKa,WAGd,cAAC,EAAD,CACE2D,aAAcxE,KAAKL,MAAM6E,aACzB/B,eAAgBzC,KAAKL,MAAM8C,eAC3BvB,SAAUlB,KAAKc,YACfuB,aAAcrC,KAAKqF,mBACnB3C,OAAQ1C,KAAKuE,aACbjC,KAAMtC,KAAKL,MAAM2C,oB,GAlFb5B,IAAMC,YCKTiF,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlC,MAAK,YAAkD,IAA/CmC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.722574cc.chunk.js","sourcesContent":["let accessToken;\nconst clientID = '876e0dffcac442d3a88bc0c8f9030193';\nconst redirectURI = 'https://numagaconsulting.github.io/live/jamming/';\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expireInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessTokenMatch && expireInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = parseFloat(expireInMatch[1]);\n      window.setTimeout(() => (accessToken = ''), expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      window.location = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n    }\n  },\n\n  search(term) {\n    accessToken = Spotify.getAccessToken();\n    return fetch(\n      `https://api.spotify.com/v1/search?type=track&limit=20&q=${term}`,\n      {\n        headers: { Authorization: `Bearer ${accessToken}` },\n      }\n    )\n      .then(\n        (response) => {\n          return response.json();\n        },\n        (networkError) => {\n          alert(networkError.message);\n        }\n      )\n      .then((jsonResponse) => {\n        // if (!jsonResponse.tracks.items.length) {\n        //   return;\n        // }\n        return jsonResponse.tracks.items.map((element) => ({\n          id: element.id,\n          name: element.name,\n          artist: element.artists[0].name,\n          album: element.album.name,\n          releaseDate: element.album.release_date,\n          uri: element.uri,\n        }));\n      });\n  },\n\n  // .savePlaylist() method accepts a playlist name and an array of track URIs. It makes the following three requests to the Spotify API:\n  // GET current user’s ID\n  // POST a new playlist with the input name to the current user’s Spotify account. Receive the playlist ID back from the request.\n  // POST the track URIs to the newly-created playlist, referencing the current user’s account (ID) and the new playlist (ID)\n\n  savePlaylist(playlistName, playlistTracks) {\n    if (!playlistName || !playlistTracks.length) {\n      return;\n    }\n\n    accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`,\n      'Content-Type': 'application/json',\n    };\n    let userID;\n\n    return fetch('https://api.spotify.com/v1/me', { headers: headers })\n      .then(\n        (response) => {\n          return response.json();\n        },\n        (networkError) => {\n          alert(networkError.message);\n        }\n      )\n      .then((jsonResponse) => {\n        userID = jsonResponse.id;\n        const userName = jsonResponse.display_name;\n\n        // create a named playlist by POST\n        return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({ name: playlistName }),\n        })\n          .then(\n            (respons) => {\n              return respons.json();\n            },\n            (networkError) => {\n              alert(`Create playlist: ${networkError.message}`);\n            }\n          )\n          .then((jsonResponse) => {\n            const playlistID = jsonResponse.id;\n\n            // save newly added tracks to the playlist just created on the step above\n            return fetch(\n              `https://api.spotify.com/v1/playlists/${playlistID}/tracks`,\n              {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify({ uris: playlistTracks }),\n              }\n            )\n              .then(\n                (respons) => {\n                  return respons.json();\n                },\n                (networkError) => {\n                  alert(`add tracks to playlist: ${networkError.message}`);\n                }\n              )\n              .then((jsonResponse) => {\n                return [userName, playlistName];\n              });\n          });\n      });\n  },\n};\n\nexport default Spotify;\n","import React from 'react';\n\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { term: '' };\n\n    this.search = this.search.bind(this);\n    this.handleTermChange = this.handleTermChange.bind(this);\n  }\n\n  search() {\n    this.props.onSearch(this.state.term);\n  }\n\n  handleTermChange(event) {\n    this.setState({ term: event.target.value });\n  }\n\n  render() {\n    return (\n      <div className='SearchBar'>\n        <input\n          placeholder='Enter A Song, Album, or Artist'\n          onChange={this.handleTermChange}\n        />\n        <button className='SearchButton' onClick={this.search}>\n          SEARCH\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;\n","import React from 'react';\n\nimport './Track.css';\n\nclass Track extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n  }\n\n  renderAction() {\n    if (this.props.isRemoval) {\n      return (\n        <button className='Track-action' onClick={this.removeTrack}>\n          -\n        </button>\n      );\n    }\n    return (\n      <button className='Track-action' onClick={this.addTrack}>\n        +\n      </button>\n    );\n  }\n\n  addTrack() {\n    this.props.onAdd(this.props.track);\n  }\n\n  removeTrack() {\n    this.props.onRemove(this.props.track);\n  }\n\n  render() {\n    return (\n      <div className='Track'>\n        <div className='Track-information'>\n          <h3>\n            {this.props.index}. {this.props.track.name}\n          </h3>\n          <p>\n            {this.props.track.artist} | {this.props.track.album}\n            {' - '}\n            {this.props.track.releaseDate &&\n              this.props.track.releaseDate.slice(0, 4)}\n          </p>\n        </div>\n        {this.renderAction()}\n      </div>\n    );\n  }\n}\n\nexport default Track;\n","import React from 'react';\nimport Track from '../Track/Track';\nimport './TrackList.css';\n\nclass TrackList extends React.Component {\n  render() {\n    return (\n      <div className='TrackList'>\n        {/* add a map method that renders a set of Track components */}\n        {this.props.tracks.map((element, index) => {\n          return (\n            <Track\n              track={element}\n              index={index + 1}\n              key={element.id}\n              onAdd={this.props.onAdd}\n              onRemove={this.props.onRemove}\n              isRemoval={this.props.isRemoval}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default TrackList;\n","import React from 'react';\nimport TrackList from '../TrackList/TrackList';\nimport './SearchResults.css';\n\nclass SearchResults extends React.Component {\n  renderResults() {\n    if (this.props.totalSearchResults) {\n      return <h2>Results: {this.props.totalSearchResults} tracks.</h2>;\n    }\n    return <h2>Results</h2>;\n  }\n\n  render() {\n    return (\n      <div className='SearchResults'>\n        {this.renderResults()}\n        {/* Pass the search results from the SearchResults component to the TrackList component. */}\n        <TrackList\n          tracks={this.props.searchResults}\n          onAdd={this.props.onAdd}\n          isRemoval={false}\n        />\n      </div>\n    );\n  }\n}\n\nexport default SearchResults;\n","import React from 'react';\nimport TrackList from '../TrackList/TrackList';\nimport './Playlist.css';\n\nclass Playlist extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleNameChange = this.handleNameChange.bind(this);\n  }\n\n  handleNameChange(event) {\n    this.props.onNameChange(event.target.value);\n  }\n\n  renderSuccessfulMessage() {\n    if (this.props.test) {\n      return (\n        <div>\n          <br />\n          <br />\n          <p>\n            Hey {this.props.test[0].split(' ')[0]}, \"{this.props.test[1]}\"\n            saved!\n          </p>\n        </div>\n      );\n    }\n  }\n\n  render() {\n    return (\n      <div className='Playlist'>\n        <input defaultValue={'New Playlist'} onChange={this.handleNameChange} />\n        {/* Pass the playlist tracks from the Playlist component to the TrackList component. */}\n        <TrackList\n          tracks={this.props.playlistTracks}\n          onRemove={this.props.onRemove}\n          isRemoval={true}\n        />\n        <button className='Playlist-save' onClick={this.props.onSave}>\n          SAVE TO SPOTIFY\n        </button>\n        {this.renderSuccessfulMessage()}\n      </div>\n    );\n  }\n}\n\nexport default Playlist;\n","import React from 'react';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      totalSearchResults: '',\n      playlistName: '',\n      playlistTracks: [],\n      test: '',\n    };\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    const newPlaylistTracks = this.state.playlistTracks;\n    if (newPlaylistTracks.find((savedTrack) => savedTrack.id === track.id)) {\n      return;\n    }\n\n    newPlaylistTracks.push(track);\n    this.setState({ playlistTracks: newPlaylistTracks });\n  }\n\n  removeTrack(track) {\n    const newPlaylistTracks = this.state.playlistTracks.filter(\n      (savedTrack) => savedTrack.id !== track.id\n    );\n    this.setState({ playlistTracks: newPlaylistTracks });\n    // this.addTrack(track);\n  }\n\n  updatePlaylistName(name) {\n    this.setState({ playlistName: name });\n  }\n\n  savePlaylist() {\n    const trackURIs = this.state.playlistTracks.map((element) => element.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackURIs).then((response) =>\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: [],\n        test: response,\n      })\n    );\n  }\n\n  search(term) {\n    Spotify.search(term).then((searchResults) =>\n      this.setState({\n        searchResults: searchResults,\n        totalSearchResults: searchResults.length,\n      })\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>\n          Ja<span className='highlight'>mmm</span>ing\n        </h1>\n        <div className='App'>\n          <SearchBar onSearch={this.search} />\n          <div className='App-playlist'>\n            {/* Pass the state of the App component’s searchResults to the SearchResults component. */}\n            <SearchResults\n              searchResults={this.state.searchResults}\n              totalSearchResults={this.state.totalSearchResults}\n              onAdd={this.addTrack}\n            />\n            {/* Pass the playlist name and tracks from the App component to the Playlist component. */}\n            <Playlist\n              playlistName={this.state.playlistName}\n              playlistTracks={this.state.playlistTracks}\n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlaylistName}\n              onSave={this.savePlaylist}\n              test={this.state.test}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}